# -*- coding: utf-8 -*-
"""prodigy-task-3.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1U07ct41LNCEVJ1gMuywEHb4OaL3_uoKx
"""

import pandas as pd
from sklearn.model_selection import train_test_split
from sklearn.tree import DecisionTreeClassifier
from sklearn.metrics import accuracy_score, classification_report, confusion_matrix
from sklearn.preprocessing import LabelEncoder
from sklearn.tree import plot_tree
import matplotlib.pyplot as plt
import zipfile
import requests
from io import BytesIO

url = "https://archive.ics.uci.edu/ml/machine-learning-databases/00222/bank-additional.zip"
response = requests.get(url)
with zipfile.ZipFile(BytesIO(response.content), 'r') as zip_ref:
    zip_ref.extractall()

# Load the dataset
bank_df = pd.read_csv("bank-additional/bank-additional-full.csv", sep=';')
bank_df

# Display basic information about the dataset
print(bank_df.info())

# Display the first few rows of the dataset
print(bank_df.head())

# Data preprocessing
# Encoding categorical variables
label_encoder = LabelEncoder()
bank_df['job'] = label_encoder.fit_transform(bank_df['job'])
bank_df['marital'] = label_encoder.fit_transform(bank_df['marital'])
bank_df['education'] = label_encoder.fit_transform(bank_df['education'])
bank_df['default'] = label_encoder.fit_transform(bank_df['default'])
bank_df['housing'] = label_encoder.fit_transform(bank_df['housing'])
bank_df['loan'] = label_encoder.fit_transform(bank_df['loan'])
bank_df['contact'] = label_encoder.fit_transform(bank_df['contact'])
bank_df['month'] = label_encoder.fit_transform(bank_df['month'])
bank_df['day_of_week'] = label_encoder.fit_transform(bank_df['day_of_week'])
bank_df['poutcome'] = label_encoder.fit_transform(bank_df['poutcome'])
bank_df['y'] = label_encoder.fit_transform(bank_df['y'])

# Split the data into features and target variable
X = bank_df.drop(columns=['y'])
X
y = bank_df['y']
y

# Split the data into training and testing sets
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)

# Build the decision tree classifier
clf = DecisionTreeClassifier(random_state=42)
clf.fit(X_train, y_train)

# Make predictions
y_pred = clf.predict(X_test)
y_pred

# Evaluate the model
print("Accuracy:", accuracy_score(y_test, y_pred))
print("\nClassification Report:\n", classification_report(y_test, y_pred))
print("\nConfusion Matrix:\n", confusion_matrix(y_test, y_pred))

# Visualize the decision tree
plt.figure(figsize=(20,10))
plot_tree(clf, filled=True, feature_names=X.columns, class_names=['No', 'Yes'])
plt.show()

